openapi: 3.0.3
info:
  title: Importadora de CSV/XLSX → Flowch
  version: 1.0.0
  description: |
    Importador serverless que lê **CSV/XLSX** e envia cada linha para o Flowch.

    ## Modos
    - **Integração (padrão):** envia **registro a registro** para outra Lambda/URL (env `INTEGRATION_URL`).
      - Header **`endpoint`** obrigatório (nome do endpoint de integração).
    - **Direto (batch):** envia **em lotes** diretamente para uma URL completa do Flowch (header `x-endpoint-url`).
      - Header `x-batch-size` controla o tamanho do lote (padrão 20).
    
    ## Entrada do arquivo
    - `multipart/form-data` com campo **`file`**
    - **ou** `application/json` com `{ base64, filename?, contentType? }`
    
    ## Normalizações
    - Datas suportadas: `dd/MM/yyyy`, `dd/MM/yyyy HH:mm`, `yyyy-MM-dd`, `yyyy-MM-dd HH:mm`, `yyyy-MM-dd[ T]HH:mm:ss` → **`yyyy-MM-dd HH:mm:ss`**
    - Booleanos: `"true"/"1"` → `true`; `"false"/"0"` → `false`
    - CSV robusto (detecta delimitador `; , \t |`, trata BOM, fallback de cabeçalho, explode linhas "empacotadas").

servers:
  - url: https://{api_id}.execute-api.{region}.amazonaws.com/{stage}
    variables:
      api_id: { default: your-api-id }
      region: { default: sa-east-1 }
      stage:  { default: prod }

paths:
  /import:
    post:
      summary: Importa arquivo CSV/XLSX e envia ao Flowch (integração ou direto)
      description: |
        **Headers obrigatórios**:
        - `Authorization`: token **cru** do Flowch (o código adiciona `integration ` quando necessário).
        - **Modo Integração:** `endpoint` (string)
        - **Modo Direto:** `x-endpoint-url` (URL completa do Flowch). Se presente, `endpoint` é ignorado.

        **Outros headers**:
        - `x-batch-size`: inteiro (modo direto), default 20
        - `x-dry-run`: `true|false` (simulação)
        - `x-preview`: `true|false` (retorna até 5 linhas parseadas)
        - `x-limit`: `N` (processa apenas N linhas)
        - `x-stop-on-error`: `true|false` (interrompe ao primeiro erro no modo integração)
        - `x-log-progress`: `true|false` (loga métricas por lote)

      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Endpoint'
        - $ref: '#/components/parameters/XEndpointUrl'
        - $ref: '#/components/parameters/XBatchSize'
        - $ref: '#/components/parameters/XDryRun'
        - $ref: '#/components/parameters/XPreview'
        - $ref: '#/components/parameters/XLimit'
        - $ref: '#/components/parameters/XStopOnError'
        - $ref: '#/components/parameters/XLogProgress'

      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ file ]
              properties:
                file:
                  type: string
                  format: binary
            examples:
              xlsx:
                summary: XLSX com cabeçalho na primeira linha
                description: Envie um .xlsx válido; a primeira linha define os nomes das colunas.
              csv:
                summary: CSV delimitado por ponto e vírgula
                description: O parser detecta automaticamente `; , \t |`, trata BOM e aspas.
          application/json:
            schema:
              $ref: '#/components/schemas/JsonUpload'
            examples:
              base64-xlsx:
                summary: XLSX em base64
                value:
                  filename: "dados.xlsx"
                  contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                  base64: "UEsDBBQAAAAI..."  # truncado
              base64-csv:
                summary: CSV em base64
                value:
                  filename: "dados.csv"
                  contentType: "text/csv"
                  base64: "Q29sMQpWYWwxCg=="  # "Col1\nVal1\n"

      responses:
        '200':
          description: Import executado (ou simulado se x-dry-run=true)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectSummary'
                  - $ref: '#/components/schemas/IntegrationSummary'
              examples:
                direto:
                  summary: Modo direto (batches para Flowch)
                  value:
                    summary:
                      modo: "direto-flowch"
                      endpointUrl: "https://int01.flowch.com/integrator/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/avaliacaoDesempenho"
                      linhasLidas: 120
                      enviadasAprox: 120
                      errosBatches: 0
                      duracaoMs: 2310
                      dryRun: false
                      preview: true
                      batchSize: 20
                      totalBatches: 6
                    preview:
                      - { nome: "Ana", ativo: true, data_nasc: "1990-05-10 00:00:00" }
                      - { nome: "Bruno", ativo: false, data_nasc: "1988-11-20 00:00:00" }
                    batches:
                      - { batchIndex: 1, size: 20, statusCode: 200, durationMs: 380, body: { accepted: 20 } }
                integracao:
                  summary: Modo integração (registro a registro)
                  value:
                    summary:
                      arquivo: "dados.xlsx"
                      contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                      linhasLidas: 5
                      enviadas: 4
                      jaExistiam: 1
                      erros: 0
                      duracaoMs: 820
                      dryRun: false
                      preview: false
                      paralelismo: 5
                      batchSize: 5
                    results:
                      - { linha: 2, endpoint: "recibo", status: "ENVIADO", mensagem: "OK", upstreamStatus: 200, perfMs: 120 }
                      - { linha: 3, endpoint: "recibo", status: "ALREADY_EXISTS", mensagem: "Registro já existia no destino.", upstreamStatus: 200, perfMs: 90 }

        '400':
          description: Erro de entrada (headers/body/arquivo)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                sem-auth:
                  value: { error: 'Header "Authorization" é obrigatório.' }
                sem-endpoint-e-sem-url:
                  value: { error: 'Header "endpoint" é obrigatório (ou use x-endpoint-url).' }
                xls:
                  value: { error: 'Arquivos .xls não são suportados por segurança. Exporte como .xlsx ou .csv.' }
                csv-sem-cabecalho:
                  value: { error: 'Cabeçalho CSV ausente.' }

        '413':
          description: Arquivo muito grande
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                limite:
                  value: { error: 'Arquivo maior que o permitido (6000000 bytes > 5242880).' }

        '500':
          description: Erro inesperado no processamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                generico:
                  value: { error: 'Erro inesperado' }

components:
  parameters:
    Authorization:
      name: Authorization
      in: header
      required: true
      schema: { type: string }
      description: Token cru do Flowch (sem prefixo).
    Endpoint:
      name: endpoint
      in: header
      required: false
      schema: { type: string }
      description: Obrigatório no **modo integração**. Ignorado se `x-endpoint-url` for usado.
    XEndpointUrl:
      name: x-endpoint-url
      in: header
      required: false
      schema: { type: string, format: uri }
      description: URL completa do Flowch (ativa o **modo direto**).
    XBatchSize:
      name: x-batch-size
      in: header
      required: false
      schema: { type: integer, minimum: 1, default: 20 }
      description: Tamanho dos lotes no modo direto.
    XDryRun:
      name: x-dry-run
      in: header
      required: false
      schema: { type: string, enum: ['true','false'] }
      description: Se `true`, simula (não envia).
    XPreview:
      name: x-preview
      in: header
      required: false
      schema: { type: string, enum: ['true','false'] }
      description: Se `true`, retorna amostra (até 5 linhas).
    XLimit:
      name: x-limit
      in: header
      required: false
      schema: { type: integer, minimum: 1 }
      description: Processa no máximo N linhas.
    XStopOnError:
      name: x-stop-on-error
      in: header
      required: false
      schema: { type: string, enum: ['true','false'] }
      description: (Integração) Interrompe no primeiro erro.
    XLogProgress:
      name: x-log-progress
      in: header
      required: false
      schema: { type: string, enum: ['true','false'] }
      description: Loga progresso e métricas por lote.

  schemas:
    JsonUpload:
      type: object
      required: [ base64 ]
      properties:
        base64:
          type: string
          description: Arquivo em base64 (suporta prefixo dataURL; será removido).
        filename:
          type: string
          description: Nome sugerido para inferência (ex. `dados.csv`).
        contentType:
          type: string
          description: Tipo MIME (ex. `text/csv`, `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`).
      example:
        filename: "dados.csv"
        contentType: "text/csv"
        base64: "QW5hO3RydWU7MjAwMC0wMS0wMSAK"

    DirectSummary:
      type: object
      properties:
        summary:
          type: object
          properties:
            modo: { type: string, enum: ["direto-flowch"] }
            endpointUrl: { type: string }
            linhasLidas: { type: integer }
            enviadasAprox: { type: integer, description: "Aproximação: considera o lote aceito se resposta 2xx." }
            errosBatches: { type: integer }
            duracaoMs: { type: integer }
            dryRun: { type: boolean }
            preview: { type: boolean }
            batchSize: { type: integer }
            totalBatches: { type: integer }
        preview:
          type: array
          items: { type: object, additionalProperties: true }
        batches:
          type: array
          items:
            type: object
            properties:
              batchIndex: { type: integer }
              size: { type: integer }
              statusCode: { type: integer }
              durationMs: { type: integer }
              body: {}

    IntegrationSummary:
      type: object
      properties:
        summary:
          type: object
          properties:
            arquivo: { type: string }
            contentType: { type: string }
            linhasLidas: { type: integer }
            enviadas: { type: integer }
            jaExistiam: { type: integer }
            erros: { type: integer }
            duracaoMs: { type: integer }
            dryRun: { type: boolean }
            preview: { type: boolean }
            paralelismo: { type: integer }
            batchSize: { type: integer }
        preview:
          type: array
          items: { type: object, additionalProperties: true }
        errosAmostra:
          type: array
          items:
            type: object
            properties:
              linha: { type: integer }
              endpoint: { type: string }
              status: { type: string }
              mensagem: { type: string }
              upstreamStatus: { type: integer }
              upstreamBody: {}
              perfMs: { type: integer }
        results:
          type: array
          items:
            type: object
            properties:
              linha: { type: integer }
              endpoint: { type: string }
              status: { type: string, enum: ["ENVIADO", "ALREADY_EXISTS", "ERRO", "ENVIADO (DRY-RUN)"] }
              mensagem: { type: string }
              upstreamStatus: { type: integer }
              perfMs: { type: integer }

    Error:
      type: object
      properties:
        error: { type: string }
